#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/aes.h>

#define PORT 12345
#define BUFFER_SIZE 1024
#define AES_KEY_SIZE 128
#define AES_BLOCK_SIZE 16

unsigned char aes_key[AES_KEY_SIZE / 8];

void generate_aes_key() {
    // Generate the same AES key as the server
    // In a real-world scenario, the client would receive the key securely from the server
    // For simplicity, we're generating the same key here
    // In practice, this key exchange would be performed securely using protocols like Diffie-Hellman or public key cryptography
    // For demonstration purposes, we're just using a hardcoded key
    // This is insecure and should not be used in production
    unsigned char key[] = "0123456789abcdef";
    memcpy(aes_key, key, sizeof(key));
}

void decrypt_aes(const unsigned char *ciphertext, int ciphertext_len, unsigned char *plaintext, unsigned char *iv) {
    AES_KEY key;
    if (AES_set_decrypt_key(aes_key, AES_KEY_SIZE, &key) < 0) {
        perror("Failed to set AES decryption key");
        exit(EXIT_FAILURE);
    }

    AES_cbc_encrypt(ciphertext, plaintext, ciphertext_len, &key, iv, AES_DECRYPT);
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};
    unsigned char iv[AES_BLOCK_SIZE];

    // Generate AES key
    generate_aes_key();

    // Create a socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("connection failed");
        exit(EXIT_FAILURE);
    }

    while (1) {
        // Receive encrypted data from server
        ssize_t bytes_received;
        if ((bytes_received = recv(sock, buffer, BUFFER_SIZE, 0)) < 0) {
            perror("recv failed");
            exit(EXIT_FAILURE);
        }
        buffer[bytes_received] = '\0';

        // Receive IV from server
        unsigned char received_iv[AES_BLOCK_SIZE];
        if (recv(sock, received_iv, AES_BLOCK_SIZE, 0) < 0) {
            perror("recv failed");
            exit(EXIT_FAILURE);
        }

        // Decrypt the received data
        unsigned char decrypted_buffer[BUFFER_SIZE];
        decrypt_aes(buffer, bytes_received, decrypted_buffer, received_iv);

        // Display the decrypted data
        printf("Received data from server: %s\n", decrypted_buffer);

        // Prompt for input from client side
        printf("Enter the data to send: ");
        fgets(buffer, BUFFER_SIZE, stdin);
        buffer[strcspn(buffer, "\n")] = '\0';  // Remove newline character

        // Send the data to the server
        send(sock, buffer, strlen(buffer), 0);
    }

    // Close the socket
    close(sock);

    return 0;
}