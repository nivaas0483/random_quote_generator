#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/aes.h> // Include OpenSSL library for AES encryption

#define PORT 12345        // Port number for communication
#define BUFFER_SIZE 1024  // Size of the buffer for sending and receiving data
#define AES_KEY_SIZE 256  // Size of the AES encryption key (256 bits)

// Function to decrypt data using AES
void decrypt_aes(const unsigned char *ciphertext, int ciphertext_len, unsigned char *plaintext, unsigned char *aes_key) {
    AES_KEY key;
    AES_set_decrypt_key(aes_key, AES_KEY_SIZE, &key); // Set the decryption key
    AES_decrypt(ciphertext, plaintext, &key);         // Decrypt the ciphertext
}

int main() {
    int sock = 0;                        // Socket file descriptor
    struct sockaddr_in serv_addr;        // Server address structure
    unsigned char aes_key[AES_KEY_SIZE / 8]; // AES encryption key

    // Generate a random AES key
    RAND_bytes(aes_key, sizeof(aes_key));

    // Create a socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Set up the server address structure
    serv_addr.sin_family = AF_INET;                  // IPv4
    serv_addr.sin_port = htons(PORT);                // Port number
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) { // Convert IP address from text to binary
        perror("invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("connection failed");
        exit(EXIT_FAILURE);
    }

    // Main loop for sending and receiving data
    while (1) {
        unsigned char plaintext[BUFFER_SIZE];    // Buffer for storing plaintext data
        unsigned char ciphertext[BUFFER_SIZE];   // Buffer for storing encrypted data
        int bytes_received;                      // Number of bytes received from the server

        // Prompt for input from the client
        printf("Enter the data to send: ");
        fgets(plaintext, BUFFER_SIZE, stdin);     // Read input from the user
        plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline character

        // Send the plaintext data to the server
        if (send(sock, plaintext, strlen(plaintext), 0) < 0) {
            perror("send failed");
            exit(EXIT_FAILURE);
        }

        // Receive encrypted data from the server
        if ((bytes_received = recv(sock, ciphertext, BUFFER_SIZE, 0)) < 0) {
            perror("recv failed");
            exit(EXIT_FAILURE);
        }

        // Decrypt the received ciphertext
        decrypt_aes(ciphertext, bytes_received, plaintext, aes_key);

        // Display the received plaintext data
        printf("Received data from server: %s\n", plaintext);
    }

    // Close the socket
    close(sock);

    return 0;
}