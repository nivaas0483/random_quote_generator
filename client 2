#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUFFER_SIZE 1024

// Function to decode data (in this case, simply reverse the string)
void decode_data(char *data) {
    int length = strlen(data);
    for (int i = 0; i < length / 2; ++i) {
        char temp = data[i];
        data[i] = data[length - i - 1];
        data[length - i - 1] = temp;
    }
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};

    // Create a socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("connection failed");
        exit(EXIT_FAILURE);
    }

    // Prompt the user to enter the data
    printf("Enter the data to be sent: ");
    fgets(buffer, BUFFER_SIZE, stdin);
    // Remove trailing newline character
    buffer[strcspn(buffer, "\n")] = '\0';

    // Send the entered data to the server
    send(sock, buffer, strlen(buffer), 0);
    printf("Data sent to server: %s\n", buffer);

    // Receive the encoded data from the server
    ssize_t bytes_received;
    if ((bytes_received = recv(sock, buffer, BUFFER_SIZE, 0)) < 0) {
        perror("recv failed");
        exit(EXIT_FAILURE);
    }

    // Null-terminate the received data
    buffer[bytes_received] = '\0';

    // Decode the received data
    decode_data(buffer);

    // Display the decoded data
    printf("Decoded data received from server: %s\n", buffer);

    // Close the socket
    close(sock);

    return 0;
}