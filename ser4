#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/rand.h>
#include <openssl/aes.h>

#define PORT 12345
#define BUFFER_SIZE 1024
#define AES_KEY_SIZE 128
#define AES_BLOCK_SIZE 16

unsigned char aes_key[AES_KEY_SIZE / 8];

void generate_aes_key() {
    // Generate a random AES key
    if (!RAND_bytes(aes_key, sizeof(aes_key))) {
        perror("Failed to generate AES key");
        exit(EXIT_FAILURE);
    }
}

void encrypt_aes(const unsigned char *plaintext, int plaintext_len, unsigned char *ciphertext, unsigned char *iv) {
    AES_KEY key;
    if (AES_set_encrypt_key(aes_key, AES_KEY_SIZE, &key) < 0) {
        perror("Failed to set AES encryption key");
        exit(EXIT_FAILURE);
    }
    
    AES_cbc_encrypt(plaintext, ciphertext, plaintext_len, &key, iv, AES_ENCRYPT);
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};
    unsigned char iv[AES_BLOCK_SIZE];

    // Generate AES key
    generate_aes_key();

    // Create a socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Forcefully attach socket to the port
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    // Accept incoming connections
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    while (1) {
        // Receive data from client
        ssize_t bytes_received;
        if ((bytes_received = recv(new_socket, buffer, BUFFER_SIZE, 0)) < 0) {
            perror("recv failed");
            exit(EXIT_FAILURE);
        }
        buffer[bytes_received] = '\0';

        // Generate a random IV
        if (!RAND_bytes(iv, sizeof(iv))) {
            perror("Failed to generate IV");
            exit(EXIT_FAILURE);
        }

        // Encrypt the data
        unsigned char encrypted_buffer[BUFFER_SIZE];
        encrypt_aes(buffer, strlen(buffer), encrypted_buffer, iv);

        // Send the encrypted data and IV to the client
        send(new_socket, encrypted_buffer, strlen(buffer), 0);
        send(new_socket, iv, AES_BLOCK_SIZE, 0);
    }

    // Close the socket
    close(new_socket);
    close(server_fd);

    return 0;
}