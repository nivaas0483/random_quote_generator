#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sodium.h>

#define PORT 12345
#define BUFFER_SIZE 1024

int main() {
    if (sodium_init() == -1) {
        fprintf(stderr, "Error initializing libsodium\n");
        exit(EXIT_FAILURE);
    }

    int sock = 0;
    struct sockaddr_in serv_addr;
    unsigned char buffer[BUFFER_SIZE] = {0};

    // Create a socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("connection failed");
        exit(EXIT_FAILURE);
    }

    while (1) {
        // Receive nonce from server
        unsigned char nonce[crypto_secretbox_NONCEBYTES];
        if (recv(sock, nonce, sizeof(nonce), 0) < 0) {
            perror("recv nonce failed");
            exit(EXIT_FAILURE);
        }

        // Receive encrypted data from server
        unsigned char ciphertext[BUFFER_SIZE + crypto_secretbox_MACBYTES];
        if (recv(sock, ciphertext, sizeof(ciphertext), 0) < 0) {
            perror("recv ciphertext failed");
            exit(EXIT_FAILURE);
        }

        // Decrypt the received data
        unsigned char decrypted[BUFFER_SIZE];
        unsigned char key[crypto_secretbox_KEYBYTES];
        memcpy(key, "12345", crypto_secretbox_KEYBYTES);
        if (crypto_secretbox_open_easy(decrypted, ciphertext, sizeof(ciphertext), nonce, key) != 0) {
            fprintf(stderr, "Decryption failed\n");
            exit(EXIT_FAILURE);
        }

        // Display the decrypted data
        printf("Received data from server: %s\n", decrypted);
    }

    // Close the socket
    close(sock);

    return 0;
}