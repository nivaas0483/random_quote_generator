#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUFFER_SIZE 1024

char* encrypt(const char *input, const char *key) {
    int input_length = strlen(input);
    int key_length = strlen(key);
    char *encrypted_text = (char*)malloc(input_length + 1);

    for (int i = 0; i < input_length; i++) {
        encrypted_text[i] = input[i] + key[i % key_length];
    }
    encrypted_text[input_length] = '\0';

    return encrypted_text;
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    const char *key = "key";
    char *encrypted_text;

    // Create a socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("connection failed");
        exit(EXIT_FAILURE);
    }

    // Get input from user
    char input[BUFFER_SIZE];
    printf("Enter the data to send: ");
    fgets(input, BUFFER_SIZE, stdin);
    input[strcspn(input, "\n")] = '\0';

    // Encrypt the input data
    encrypted_text = encrypt(input, key);

    // Send the encrypted data to the server
    send(sock, encrypted_text, strlen(encrypted_text), 0);

    // Free allocated memory
    free(encrypted_text);

    // Close the socket
    close(sock);

    return 0;
}